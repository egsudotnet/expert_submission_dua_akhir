// Mocks generated by Mockito 5.3.2 from annotations
// in home/test/presentation/pages/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;

import 'package:bloc/bloc.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/usecase/get_now_playing_movies.dart' as _i2;
import 'package:movie/domain/usecase/get_popular_movies.dart' as _i4;
import 'package:movie/domain/usecase/get_top_rated_movies.dart' as _i6;
import 'package:movie/presentation/cubit/movie_now_playing_cubit.dart' as _i3;
import 'package:movie/presentation/cubit/movie_popular_cubit.dart' as _i5;
import 'package:movie/presentation/cubit/movie_top_rated_cubit.dart' as _i7;
import 'package:tv/domain/usecase/get_now_playing_tv.dart' as _i8;
import 'package:tv/domain/usecase/get_popular_tv.dart' as _i10;
import 'package:tv/domain/usecase/get_top_rated_tv.dart' as _i12;
import 'package:tv/presentation/cubit/tv_now_playing_cubit.dart' as _i9;
import 'package:tv/presentation/cubit/tv_popular_cubit.dart' as _i11;
import 'package:tv/presentation/cubit/tv_top_rated_cubit.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingMovies_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieNowPlayingState_1 extends _i1.SmartFake
    implements _i3.MovieNowPlayingState {
  _FakeMovieNowPlayingState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularMovies_2 extends _i1.SmartFake
    implements _i4.GetPopularMovies {
  _FakeGetPopularMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMoviePopularState_3 extends _i1.SmartFake
    implements _i5.MoviePopularState {
  _FakeMoviePopularState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedMovies_4 extends _i1.SmartFake
    implements _i6.GetTopRatedMovies {
  _FakeGetTopRatedMovies_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieTopRatedState_5 extends _i1.SmartFake
    implements _i7.MovieTopRatedState {
  _FakeMovieTopRatedState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNowPlayingTv_6 extends _i1.SmartFake
    implements _i8.GetNowPlayingTv {
  _FakeGetNowPlayingTv_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvNowPlayingState_7 extends _i1.SmartFake
    implements _i9.TvNowPlayingState {
  _FakeTvNowPlayingState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularTv_8 extends _i1.SmartFake implements _i10.GetPopularTv {
  _FakeGetPopularTv_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvPopularState_9 extends _i1.SmartFake
    implements _i11.TvPopularState {
  _FakeTvPopularState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedTv_10 extends _i1.SmartFake
    implements _i12.GetTopRatedTv {
  _FakeGetTopRatedTv_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvTopRatedState_11 extends _i1.SmartFake
    implements _i13.TvTopRatedState {
  _FakeTvTopRatedState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieNowPlayingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieNowPlayingCubit extends _i1.Mock
    implements _i3.MovieNowPlayingCubit {
  MockMovieNowPlayingCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get nowPlayingMovies => (super.noSuchMethod(
        Invocation.getter(#nowPlayingMovies),
        returnValue: _FakeGetNowPlayingMovies_0(
          this,
          Invocation.getter(#nowPlayingMovies),
        ),
      ) as _i2.GetNowPlayingMovies);
  @override
  _i3.MovieNowPlayingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieNowPlayingState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.MovieNowPlayingState);
  @override
  _i14.Stream<_i3.MovieNowPlayingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i3.MovieNowPlayingState>.empty(),
      ) as _i14.Stream<_i3.MovieNowPlayingState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchNowPlayingMovie() => super.noSuchMethod(
        Invocation.method(
          #fetchNowPlayingMovie,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.MovieNowPlayingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i3.MovieNowPlayingState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}

/// A class which mocks [MoviePopularCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviePopularCubit extends _i1.Mock implements _i5.MoviePopularCubit {
  MockMoviePopularCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularMovies get popularMovies => (super.noSuchMethod(
        Invocation.getter(#popularMovies),
        returnValue: _FakeGetPopularMovies_2(
          this,
          Invocation.getter(#popularMovies),
        ),
      ) as _i4.GetPopularMovies);
  @override
  _i5.MoviePopularState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMoviePopularState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.MoviePopularState);
  @override
  _i14.Stream<_i5.MoviePopularState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i5.MoviePopularState>.empty(),
      ) as _i14.Stream<_i5.MoviePopularState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchPopularMovie() => super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovie,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.MoviePopularState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i5.MoviePopularState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}

/// A class which mocks [MovieTopRatedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieTopRatedCubit extends _i1.Mock
    implements _i7.MovieTopRatedCubit {
  MockMovieTopRatedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedMovies get topRatedMovies => (super.noSuchMethod(
        Invocation.getter(#topRatedMovies),
        returnValue: _FakeGetTopRatedMovies_4(
          this,
          Invocation.getter(#topRatedMovies),
        ),
      ) as _i6.GetTopRatedMovies);
  @override
  _i7.MovieTopRatedState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieTopRatedState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.MovieTopRatedState);
  @override
  _i14.Stream<_i7.MovieTopRatedState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i7.MovieTopRatedState>.empty(),
      ) as _i14.Stream<_i7.MovieTopRatedState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchTopRatedMovie() => super.noSuchMethod(
        Invocation.method(
          #fetchTopRatedMovie,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i7.MovieTopRatedState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i7.MovieTopRatedState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}

/// A class which mocks [TvNowPlayingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvNowPlayingCubit extends _i1.Mock implements _i9.TvNowPlayingCubit {
  MockTvNowPlayingCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetNowPlayingTv get nowPlayingTv => (super.noSuchMethod(
        Invocation.getter(#nowPlayingTv),
        returnValue: _FakeGetNowPlayingTv_6(
          this,
          Invocation.getter(#nowPlayingTv),
        ),
      ) as _i8.GetNowPlayingTv);
  @override
  _i9.TvNowPlayingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTvNowPlayingState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.TvNowPlayingState);
  @override
  _i14.Stream<_i9.TvNowPlayingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i9.TvNowPlayingState>.empty(),
      ) as _i14.Stream<_i9.TvNowPlayingState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchNowPlayingTv() => super.noSuchMethod(
        Invocation.method(
          #fetchNowPlayingTv,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i9.TvNowPlayingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i9.TvNowPlayingState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}

/// A class which mocks [TvPopularCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvPopularCubit extends _i1.Mock implements _i11.TvPopularCubit {
  MockTvPopularCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.GetPopularTv get popularTv => (super.noSuchMethod(
        Invocation.getter(#popularTv),
        returnValue: _FakeGetPopularTv_8(
          this,
          Invocation.getter(#popularTv),
        ),
      ) as _i10.GetPopularTv);
  @override
  _i11.TvPopularState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTvPopularState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.TvPopularState);
  @override
  _i14.Stream<_i11.TvPopularState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i11.TvPopularState>.empty(),
      ) as _i14.Stream<_i11.TvPopularState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchPopularTv() => super.noSuchMethod(
        Invocation.method(
          #fetchPopularTv,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i11.TvPopularState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i11.TvPopularState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}

/// A class which mocks [TvTopRatedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvTopRatedCubit extends _i1.Mock implements _i13.TvTopRatedCubit {
  MockTvTopRatedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GetTopRatedTv get topRatedTv => (super.noSuchMethod(
        Invocation.getter(#topRatedTv),
        returnValue: _FakeGetTopRatedTv_10(
          this,
          Invocation.getter(#topRatedTv),
        ),
      ) as _i12.GetTopRatedTv);
  @override
  _i13.TvTopRatedState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTvTopRatedState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.TvTopRatedState);
  @override
  _i14.Stream<_i13.TvTopRatedState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i13.TvTopRatedState>.empty(),
      ) as _i14.Stream<_i13.TvTopRatedState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void fetchTopRatedTv() => super.noSuchMethod(
        Invocation.method(
          #fetchTopRatedTv,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i13.TvTopRatedState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i15.Change<_i13.TvTopRatedState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
}
