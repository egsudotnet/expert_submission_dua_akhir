// Mocks generated by Mockito 5.3.0 from annotations
// in tv/test/presentation/pages/home_tv_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/usecase/get_now_playing_tv.dart' as _i2;
import 'package:tv/domain/usecase/get_popular_tv.dart' as _i4;
import 'package:tv/domain/usecase/get_top_rated_tv.dart' as _i6;
import 'package:tv/presentation/cubit/tv_now_playing_cubit.dart'
    as _i3;
import 'package:tv/presentation/cubit/tv_popular_cubit.dart'
    as _i5;
import 'package:tv/presentation/cubit/tv_top_rated_cubit.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingTv_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingTv {
  _FakeGetNowPlayingTv_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvNowPlayingState_1 extends _i1.SmartFake
    implements _i3.TvNowPlayingState {
  _FakeTvNowPlayingState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetPopularTv_2 extends _i1.SmartFake
    implements _i4.GetPopularTv {
  _FakeGetPopularTv_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvPopularState_3 extends _i1.SmartFake
    implements _i5.TvPopularState {
  _FakeTvPopularState_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTopRatedTv_4 extends _i1.SmartFake
    implements _i6.GetTopRatedTv {
  _FakeGetTopRatedTv_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvTopRatedState_5 extends _i1.SmartFake
    implements _i7.TvTopRatedState {
  _FakeTvTopRatedState_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TvNowPlayingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvNowPlayingCubit extends _i1.Mock
    implements _i3.TvNowPlayingCubit {
  MockTvNowPlayingCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingTv get nowPlayingTv =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingTv),
              returnValue: _FakeGetNowPlayingTv_0(
                  this, Invocation.getter(#nowPlayingTv)))
          as _i2.GetNowPlayingTv);
  @override
  _i3.TvNowPlayingState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue:
              _FakeTvNowPlayingState_1(this, Invocation.getter(#state)))
      as _i3.TvNowPlayingState);
  @override
  _i8.Stream<_i3.TvNowPlayingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i3.TvNowPlayingState>.empty())
          as _i8.Stream<_i3.TvNowPlayingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchNowPlayingTv() =>
      super.noSuchMethod(Invocation.method(#fetchNowPlayingTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.TvNowPlayingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i3.TvNowPlayingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [TvPopularCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvPopularCubit extends _i1.Mock
    implements _i5.TvPopularCubit {
  MockTvPopularCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularTv get popularTv =>
      (super.noSuchMethod(Invocation.getter(#popularTv),
              returnValue: _FakeGetPopularTv_2(
                  this, Invocation.getter(#popularTv)))
          as _i4.GetPopularTv);
  @override
  _i5.TvPopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvPopularState_3(this, Invocation.getter(#state)))
          as _i5.TvPopularState);
  @override
  _i8.Stream<_i5.TvPopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i5.TvPopularState>.empty())
          as _i8.Stream<_i5.TvPopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchPopularTv() =>
      super.noSuchMethod(Invocation.method(#fetchPopularTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.TvPopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i5.TvPopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [TvTopRatedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvTopRatedCubit extends _i1.Mock
    implements _i7.TvTopRatedCubit {
  MockTvTopRatedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedTv get topRatedTv =>
      (super.noSuchMethod(Invocation.getter(#topRatedTv),
              returnValue: _FakeGetTopRatedTv_4(
                  this, Invocation.getter(#topRatedTv)))
          as _i6.GetTopRatedTv);
  @override
  _i7.TvTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvTopRatedState_5(this, Invocation.getter(#state)))
          as _i7.TvTopRatedState);
  @override
  _i8.Stream<_i7.TvTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i7.TvTopRatedState>.empty())
          as _i8.Stream<_i7.TvTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchTopRatedTv() =>
      super.noSuchMethod(Invocation.method(#fetchTopRatedTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.TvTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i7.TvTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}
